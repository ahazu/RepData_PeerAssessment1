[c(3,5,7)]
c(x,3,5,7)
c(3,5,7)
info()
[c(3,5,7)]
skip()
play()
x[c(3,5,7)]
nxt()
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vert
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5 != 7
FALSE(5==7)
FALSE == (5==7)
FALSE == (5!=7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5=6, !FALSE)
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
library("swirl", lib.loc="~/R/win-library/3.2")
detach("package:swirl", unload=TRUE)
all(ints > 0)
swirl()
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
swirl()
sys.Date()
Sys.Date
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
?sum
submit()
my_mean(c4,5,10)
my_mean(c(4,5,10)
)
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(deviance(c(1.4,3.6,7.9,8.8)))
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(sd(c(1.4,3.6,7.9,8.8)))
bye)
bye()
install.packages(swirl)
install.packages("swirl")
install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
install_from_swirl("Data_Analysis")
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(head, c(8,4,0))
evaluate(head(x), c(8,4,0))
evaluate(head, c(8,4,0))
?head
evaluate(head(x){x}, c(8,4,0))
evaluate(head, c(8,4,0))
head, c(8,4,0)
head(c(8,4,0))
evaluate(head(x,n=1), c(8,4,0))
evaluate(head(x[1]), c(8,4,0))
skip()
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("What the fuck did you just say to me you little bitch?")
submit()
submit()
mad_libs("Norway", "cunty", "dragon dildos")
submit()
I %p% love %p% R
I %p% love
skip()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
View(flag_colors)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals -> lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
bye()
swirt
swirl()
sapply(flags, unique)
bye()
bye()
exit()
library(swirl)
swirl()
n(cran, by_package)
n(by_package)
n()
summarize(by_package, n())
source('C:/Users/per_000/AppData/Local/Temp/RtmpGGvx0G/summarize1.R')
submit()
avg_bytes = mean(size))
avg_bytes = mean(size)
avg_bytes = mean(size))
summarize(by_package, avg_bytes = mean(size))
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
arrange(top_unique, desc(unique))
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
cran
?select
cran
select(ip_id, country, package, size) %>%
''
submit()
?mmutate
?mutate
mutate(cran, size_mb = size / 2^20)
submit()
print
mutate(cran, size_mb = size / 2^20)
submit()
mutate(cran, size_mb = size / 2^20) %>% print
submit()
mutate(size_mb = size / 2^20) %>% print
print
mutate(cran, size_mb = size / 2^20) %>%
mutate(cran, size_mb = size / 2^20) %>% print
mutate(cran, size_mb = size / 2^20) %>% print
submit()
mutate(cran, size_mb = size/2^20 ) %>% print
submit()
mutate(cran, size_mb = size/2^20) %>% print
submit()
library(swirl)
swirl()
library(tidir)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex, class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
submit()
submit()
submit()
?spread()
?spread
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
student4
students4
submit()
submit()
submit
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(passed, status = "failed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
---
title: "PA1_template"
author: "Per Rynning"
date: "7. januar 2016"
output: html_document
---
This document details my submission for course project 1 in the Reproducible Research course.
The goal of the project is to download and analyze Acivity monitoring data and answer the following main questions:
- What is mean total number of steps taken per day?
- What is the average daily activity pattern?
- Are there differences in activity patterns between weekdays and weekends?
To start off we will load the required libraries:
```{r, echo=TRUE, warning=FALSE, message=FALSE}
library(lubridate)
library(stringr)
library(dplyr)
library(ggplot2)
```
Next step is to download the data from <https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip> unless it is already present in the current working directory.
```{r}
## Downloads dataset if not available in the current folder
if(!file.exists("repdata-data-activity.zip") && !file.exists("activity.csv")){
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
destfile = "repdata-data-activity.zip")
dateDownloaded <- date()
##This report was based on data downloaded `r dateDownloaded`.
unzip("repdata-data-activity.zip")
}
```
We read the data using *read.csv*
```{r}
## Reads the data from file
activity <- read.csv(file = "activity.csv",
header = T)
```
We create a new column, *datetime*, by combining the *date* and *interval* fields, and convert this so that we have a POSIX date for each entry.
```{r}
## Creates datetime column combining date and interval to POSIX date
activity$datetime <- paste(activity$date,
str_pad(activity$interval,
width = 4,
side="left",
pad="0"))
activity$datetime <- ymd_hm(activity$datetime)
```
## Mean total number of steps
To make a histogram of total number of steps pr day we create a new data frame called *steps_pr_day*
```{r}
## Finds nr of steps pr day
steps_pr_day <- group_by(activity,
date) %>%
summarise(totalsteps = sum(steps))
```
We then get this histogram showing total number of steps pr day  and the frequency.
**Note**: For this part of the exercise we have ignored missing values in the dataset.
```{r}
hist(steps_pr_day$totalsteps,
main = "Frequency of total steps for a day",
xlab = "Total steps for a day")
```
The mean and median steps per day are
```{r}
## Mean steps per day
mean(steps_pr_day$totalsteps, na.rm = T)
## Median steps per day
median(steps_pr_day$totalsteps, na.rm = T)
```
## Average daily activity pattern
We'd like to see how the average daily activity pattern is. We can do this by grouping the data on the intervals.
```{r}
steps_pr_interval <- group_by(activity,
interval) %>%
summarise(meansteps = mean(steps,
na.rm = T))
## Uses qplot to plot the average daily activity pattern
qplot(interval,
meansteps,
data = steps_pr_interval,
type="line",
ylab = "Mean number of steps",
xlab = "Interval",
main = "Average daily activity pattern")
```
### Missing values
The activity dataset we are working with currently has many missing values
```{r}
## Sums up missing values from activity$steps
sum(is.na(activity$steps))
```
getwd()
setwd("Coursera/Data Science/5 - Reproducible Research/reproducible_research_ex1/")
View(steps_pr_day)
steps_pr_interval <- group_by(activity,
interval) %>%
summarise(meansteps = mean(steps,
na.rm = T))
View(steps_pr_interval)
activity_mean_na <- activity
activity_mean_na$steps[which(is.na(activity_mean_na))]
activity_mean_na$steps[which(is.na(activity_mean_na$steps))]
activity_mean_na$steps[which(is.na(activity_mean_na$steps))] <- mapvalues(steps_pr_interval$meansteps, from = activity_mean_na$steps, to = steps_pr_interval$meansteps)
activity_mean_na$steps[which(is.na(activity_mean_na$steps))] <- steps_pr_interval[match(activity_mean_na$interval, steps_pr_interval$interval)]
sum(is.na(activity_mean_na$steps))
hist(activity_mean_na$steps)
View(activity_mean_na)
activity_mean_na <- activity
which(is.na(activity_mean_na$steps)) <- steps_pr_interval[match(activity_mean_na$interval, steps_pr_interval$interval)]
activity_mean_na$steps[which(is.na(activity_mean_na$steps))] <- steps_pr_interval$meansteps[match(activity_mean_na$interval, steps_pr_interval$interval)]
View(activity_mean_na)
View(steps_pr_interval)
View(activity)
activity_mean_na$steps[which(is.na(activity_mean_na$steps))] <-
steps_pr_interval$meansteps[match(activity_mean_na$interval,
steps_pr_interval$interval)]
steps_pr_day_nas_replaced <- group_by(activity_mean_na,
date) %>%
summarise(totalsteps = sum(steps))
View(steps_pr_day_nas_replaced)
View(steps_pr_day)
hist(steps_pr_day_nas_replaced$totalsteps,
main = "Frequency of total steps for a day (NAs replaced with means)",
xlab = "Total steps for a day")
mean(steps_pr_day_nas_replaced$totalsteps)
median(steps_pr_day_nas_replaced$totalsteps)
View(activity_mean_na)
?weekdays()
head(weekdays(activity_mean_na$datetime))
Sys.setlocale("LC_TIME", "C")
head(weekdays(activity_mean_na$datetime))
system.date()
date()
library(timedate)
library(timeDate)
install.packages("timeDate")
library(timeDate)
activity_mean_na$weekday <- isWeekday(activity_mean_na$datetime, wday=1:5)
factor(activity_mean_na$weekday, levels=c(TRUE, FAlSE), labels=c("WEEKDAY", "WEEKEND"))
activity_mean_na$weekday <- mapvalues(activity_mean_na$weekday, from=c(TRUE, FAlSE), to=c("WEEKDAY", "WEEKEND"))
library(dplyr)
activity_mean_na$weekday <- mapvalues(activity_mean_na$weekday, from=c(TRUE, FAlSE), to=c("WEEKDAY", "WEEKEND"))
library(plyr)
activity_mean_na$weekday <- mapvalues(activity_mean_na$weekday, from=c(TRUE, FAlSE), to=c("WEEKDAY", "WEEKEND"))
activity_mean_na$weekday <- mapvalues(activity_mean_na$weekday, from=c(TRUE, FALSE), to=c("WEEKDAY", "WEEKEND"))
steps_pr_interval_nas_replaced <- group_by(activity_mean_na, interval, weekday) %>% summarise(meansteps = mean(steps))
View(steps_pr_interval_nas_replaced)
steps_pr_interval_nas_replaced <- group_by(activity_mean_na, interval) %>% summarise(meansteps = mean(steps))
View(steps_pr_interval_nas_replaced)
steps_pr_interval_nas_replaced <- group_by(activity_mean_na, interval) %>% summarise(meansteps = mean(steps))
steps_pr_interval_nas_replaced <- group_by(activity_mean_na, interval) %>% summarise(meansteps = mean(steps, na.rm = T))
View(activity_mean_na)
steps_pr_interval_nas_replaced <- group_by(activity_mean_na, interval)
summarise(steps_pr_interval_nas_replaced, steps)
steps_pr_interval <- group_by(activity,
interval) %>%
summarise(meansteps = mean(steps,
na.rm = T))
activity$datetime <- paste(activity$date,
str_pad(activity$interval,
width = 4,
side="left",
pad="0"))
activity$datetime <- ymd_hm(activity$datetime)
steps_pr_day <- group_by(activity,
date) %>%
summarise(totalsteps = sum(steps))
View(steps_pr_day)
library.dynam.unload(plyr)
unloadNamespace(plyr)
unloadNamespace("plyr")
library(dplyr)
steps_pr_day <- group_by(activity,
date) %>%
summarise(totalsteps = sum(steps))
steps_pr_interval <- group_by(activity,
interval) %>%
summarise(meansteps = mean(steps,
na.rm = T))
steps_pr_interval <- group_by(activity,
interval,
weekday) %>%
summarise(meansteps = mean(steps))
## We'll create a summary grouped by interval and weekdays/weekenda
steps_pr_interval_nas_replaced <- group_by(activity_mean_na,
interval,
weekday) %>%
summarise(meansteps = mean(steps))
qplot(interval, meansteps, data=steps_pr_interval_nas_replaced, type="line")
meansteps_plot <- qplot(interval, meansteps, data=steps_pr_interval_nas_replaced, type="line")
meansteps_plot + facet_grid(. ~ weekday)
?knit2html
getwd()
setwd("../RepData_PeerAssessment1/")
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
?knitr::knit
setwd("doc/")
knit2html("..\PA1_template.Rmd")
knit2html("../PA1_template.Rmd")
setwd("..")
knit2html("PA1_template.Rmd")
rmarkdown::render("PA1_template.Rmd", "html_document")
setwd("../RepData_PeerAssessment1/")
knit2html("PA1_template.Rmd")
knitr::opts_chunk
knitr::opts_chunk$get
knitr::opts_chunk$set(fig.path = "figures/")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
